service:
  name: my-board-games-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-plugin-tracing


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing: true

  environment:
    GAMES_TABLE: board-games-${self:provider.stage}
    GAMES_ID_INDEX: UserIdIndex
    ATTACHMENTS_S3_BUCKET: serverless-game-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

custom:
  topicName: games-images-topic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Games API
        description: Serverless application for games list



functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetGames:
    handler: src/lambda/http/getGames.handler
    events:
      - http:
          method: get
          path: games
          authorizer: Auth
          cors: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}/index/${self:provider.environment.GAMES_ID_INDEX}

  CreateGame:
    handler: src/lambda/http/createGame.handler
    events:
      - http:
          method: post
          path: games
          authorizer: Auth
          cors: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}

  UpdateGame:
    handler: src/lambda/http/updateGame.handler
    events:
      - http:
          method: patch
          path: games/{gameId}
          authorizer: Auth
          cors: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}

  DeleteGame:
    handler: src/lambda/http/deleteGame.handler
    events:
      - http:
          method: delete
          path: games/{gameId}
          authorizer: Auth
          cors: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}


  UpdateImageURL:
    handler: src/lambda/http/updateImageURL.handler
    events:
      - http:
          method: post
          path: games/{gameId}/attachment
          authorizer: Auth
          cors: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GameDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: gameId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GAMES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GAMES_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
